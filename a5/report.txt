// REPORT:

Recall that heap sort has a guaranteed efficiency of O(n*log(n)) and selection sort has an efficiency of O(n^2).

Test cases for the array size: 10 / 1000 / 1,000 / 10,000 / 100,000

The total comparisons for selection sort should be n(n-1)/2. Therefore, when the array size is 10, we get 45 comparisons. If it is 100, we get 4950 comparisons. Therefore, we can verify that the selection sort has an efficiency of O(n^2)--especially because it has two nested for loops. The amount of swaps regarding the selection sort is actually a variable, considering it depends on the array itself. For instance, for n = 10, my data outputted 7 swaps, but for n = 100, the data swapped 94 times. 

For heap sorting, the amount of swaps is equal to the array size, since the sort is swapping the elements without any constraints (i.e. if n = 10, then there are 10 swaps). The math behind its total comparison equation is a bit more advanced. However, we can definitely deduce that the Big-O notation for the heap sort is less dominant than the Big-O notation for the selection sort when graphed on the ny-plane. The first for-loop has an efficiency of O(log(n)) and the second for loop has an efficiency of O(n). Therefore, we get O(n*log(n)) to be the efficiency for the heap sort.

In terms of swapping, we can then establish that the selection sort may perform less swaps than the heap sort. In terms of comparisons, we establish that the heap sort is significantly more efficient than the selection sort as O(n*log(n)) < O(n^2). 


---------------------------CODE OUTPUT---------------------------

Enter your desired array size below. If -1 is entered, then the entire program will close.
10
=============
Array output:

-58
60
66
-66
-34
-96
36
6
-2
87
=============

=============
Array output:

-96
-66
-58
-34
-2
6
36
60
66
87
=============


-----------Selection Sort -----------

Array size: 10
Number of comparisons: 45
Number of moves: 7

=============
Array output:

-58
60
66
-66
-34
-96
36
6
-2
87
=============

=============
Array output:

-96
-66
-58
-34
-2
6
36
60
66
87
=============


-----------Heap Sort -----------

Array size: 10
Number of comparisons: 35
Number of moves: 10

Enter your desired array size below. If -1 is entered, then the entire program will close.
100
=============
Array output:

34
-13
98
12
-88
-6
-89
-97
-48
-36
54
-22
22
54
-6
-55
9
-89
-82
95
-25
-64
-54
96
-21
-87
96
-68
21
44
-52
31
-20
-14
62
-12
-82
50
95
3
-24
83
-73
22
38
24
67
90
-32
82
78
-49
2
-48
-10
-42
-14
87
61
62
84
25
70
63
-7
-72
-18
-42
16
66
28
-13
-94
-45
-49
0
91
-86
-98
-59
-70
-97
50
80
65
-53
99
-7
-55
-75
-42
-28
-37
-92
-81
80
-52
18
-67
-1
=============

=============
Array output:

-98
-97
-97
-94
-92
-89
-89
-88
-87
-86
-82
-82
-81
-75
-73
-72
-70
-68
-67
-64
-59
-55
-55
-54
-53
-52
-52
-49
-49
-48
-48
-45
-42
-42
-42
-37
-36
-32
-28
-25
-24
-22
-21
-20
-18
-14
-14
-13
-13
-12
-10
-7
-7
-6
-6
-1
0
2
3
9
12
16
18
21
22
22
24
25
28
31
34
38
44
50
50
54
54
61
62
62
63
65
66
67
70
78
80
80
82
83
84
87
90
91
95
95
96
96
98
99
=============


-----------Selection Sort -----------

Array size: 100
Number of comparisons: 4950
Number of moves: 95

=============
Array output:

34
-13
98
12
-88
-6
-89
-97
-48
-36
54
-22
22
54
-6
-55
9
-89
-82
95
-25
-64
-54
96
-21
-87
96
-68
21
44
-52
31
-20
-14
62
-12
-82
50
95
3
-24
83
-73
22
38
24
67
90
-32
82
78
-49
2
-48
-10
-42
-14
87
61
62
84
25
70
63
-7
-72
-18
-42
16
66
28
-13
-94
-45
-49
0
91
-86
-98
-59
-70
-97
50
80
65
-53
99
-7
-55
-75
-42
-28
-37
-92
-81
80
-52
18
-67
-1
=============

=============
Array output:

-98
-97
-97
-94
-92
-89
-89
-88
-87
-86
-82
-82
-81
-75
-73
-72
-70
-68
-67
-64
-59
-55
-55
-54
-53
-52
-52
-49
-49
-48
-48
-45
-42
-42
-42
-37
-36
-32
-28
-25
-24
-22
-21
-20
-18
-14
-14
-13
-13
-12
-10
-7
-7
-6
-6
-1
0
2
3
9
12
16
18
21
22
22
24
25
28
31
34
38
44
50
50
54
54
61
62
62
63
65
66
67
70
78
80
80
82
83
84
87
90
91
95
95
96
96
98
99
=============


-----------Heap Sort -----------

Array size: 100
Number of comparisons: 631
Number of moves: 100

Enter your desired array size below. If -1 is entered, then the entire program will close.
1000

-----------Selection Sort -----------

Array size: 1000
Number of comparisons: 499500
Number of moves: 990


-----------Heap Sort -----------

Array size: 1000
Number of comparisons: 9575
Number of moves: 1000

Enter your desired array size below. If -1 is entered, then the entire program will close.
10000

-----------Selection Sort -----------

Array size: 10000
Number of comparisons: 49995000
Number of moves: 9961


-----------Heap Sort -----------

Array size: 10000
Number of comparisons: 128685
Number of moves: 10000

Enter your desired array size below. If -1 is entered, then the entire program will close.
100000

-----------Selection Sort -----------

Array size: 100000
Number of comparisons: 704982704
Number of moves: 99481


-----------Heap Sort -----------

Array size: 100000
Number of comparisons: 1618873
Number of moves: 100000

Enter your desired array size below. If -1 is entered, then the entire program will close.
-1